package schema

import (
	"fmt"
	"html/template"
	"io/ioutil"
	"os"
	"strings"

	"gopkg.in/yaml.v2"
)

const tmpl = `
//AUTO GENERATED BY schema_gen.go from schemas/{{.Name}}.yaml
type {{.Name}} struct {
	{{- range $field := .Fields}}
	{{$field.Name}} {{$field.Type}}
	{{- end}}
}
`

type field struct {
	Name string
	Type string
}
type schema struct {
	Name   string
	Fields []field
}

func Generate(schemaDirPath string) error {
	files, err := ioutil.ReadDir(fmt.Sprintf("%v/schemas", schemaDirPath))
	if err != nil {
		return fmt.Errorf("Error reading schemas dir %v : %v\n", schemaDirPath, err)
	}

	t := template.Must(template.New("struct").Parse(tmpl))

	fmt.Printf("Generating structures for %v schemas\n", len(files))
	for _, fileInfo := range files {
		schemaName := strings.Split(fileInfo.Name(), ".")[0]
		file, err := ioutil.ReadFile(fmt.Sprintf("%v/schemas/%v.yaml", schemaDirPath, schemaName))
		if err != nil {
			return fmt.Errorf("Error reading file %v: %v", schemaName, err)
		}
		var s schema
		err = yaml.Unmarshal(file, &s)
		if err != nil {
			return fmt.Errorf("Error unmarshalling yaml for %v: %v", schemaName, err)
		}
		fmt.Printf("%+v\n", s)

		genFile, err := os.Create(fmt.Sprintf("%v/generated_schemas/%v.go", schemaDirPath, schemaName))
		if err != nil {
			return fmt.Errorf("Error opening generated file for %v: %v", schemaName, err)
		}

		err = t.Execute(genFile, s)
		if err != nil {
			return fmt.Errorf("Error executing template for %v: %v", schemaName, err)
		}
		fmt.Printf("Generated %v\n", schemaName)
	}

	return nil
}
